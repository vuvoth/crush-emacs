{"version":3,"sources":["../src/global_tracer.js"],"names":[],"mappings":";;;;;;;;QA2CgB,gB,GAAA,gB;QAOA,Y,GAAA,Y;;AAlDhB;;;;;;;;;;;;AAEA,IAAM,aAAa,sBAAnB;AACA,IAAI,gBAAgB,IAApB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACM,oB;;;;;;;;;;;oCAEiB;AACf,gBAAM,SAAS,iBAAiB,UAAhC;AACA,mBAAO,OAAO,SAAP,yBAAP;AACH;;;iCAEe;AACZ,gBAAM,SAAS,iBAAiB,UAAhC;AACA,mBAAO,OAAO,MAAP,yBAAP;AACH;;;kCAEgB;AACb,gBAAM,SAAS,iBAAiB,UAAhC;AACA,mBAAO,OAAO,OAAP,yBAAP;AACH;;;;;;AAGL,IAAM,uBAAuB,IAAI,oBAAJ,EAA7B;;AAEA;;;;;;;AAOO,SAAS,gBAAT,CAA0B,MAA1B,EAAkC;AACrC,oBAAgB,MAAhB;AACH;;AAED;;;AAGO,SAAS,YAAT,GAAwB;AAC3B;AACA;AACA;AACA;AACA,WAAO,oBAAP;AACH","file":"global_tracer.js","sourcesContent":["import Tracer from './tracer';\n\nconst noopTracer = new Tracer();\nlet _globalTracer = null;\n\n// Allows direct importing/requiring of the global tracer:\n//\n// let globalTracer = require('opentracing/global');\n//      OR\n// import globalTracer from 'opentracing/global';\n//\n// Acts a bridge to the global tracer that can be safely called before the\n// global tracer is initialized. The purpose of the delegation is to avoid the\n// sometimes nearly intractible initialization order problems that can arise in\n// applications with a complex set of dependencies, while also avoiding the\n// case where\nclass GlobalTracerDelegate extends Tracer {\n\n    startSpan(...args) {\n        const tracer = _globalTracer || noopTracer;\n        return tracer.startSpan(...args);\n    }\n\n    inject(...args) {\n        const tracer = _globalTracer || noopTracer;\n        return tracer.inject(...args);\n    }\n\n    extract(...args) {\n        const tracer = _globalTracer || noopTracer;\n        return tracer.extract(...args);\n    }\n}\n\nconst globalTracerDelegate = new GlobalTracerDelegate();\n\n/**\n * Set the global Tracer.\n *\n * The behavior is undefined if this function is called more than once.\n *\n * @param {Tracer} tracer - the Tracer implementation\n */\nexport function initGlobalTracer(tracer) {\n    _globalTracer = tracer;\n}\n\n/**\n * Returns the global tracer.\n */\nexport function globalTracer() {\n    // Return the delegate.  Since the global tracer is largely a convenience\n    // (the user can always create their own tracers), the delegate is used to\n    // give the added convenience of not needing to worry about initialization\n    // order.\n    return globalTracerDelegate;\n}\n"]}
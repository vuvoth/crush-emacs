{"version":3,"sources":["../../src/mock_tracer/mock_tracer.js"],"names":[],"mappings":";;;;;;;;AAEA;;;;AAEA;;;;AACA;;;;;;;;;;;AAJA;;;AAMA;;;IAGqB,U;;;;;;;AAEjB;AACA;AACA;;mCAEW,I,EAAM,M,EAAQ;AACrB;AACA;AACA;AACA,gBAAM,OAAO,KAAK,UAAL,CAAgB,MAAhB,CAAb;AACA,iBAAK,gBAAL,CAAsB,IAAtB;AACA,iBAAK,MAAL,CAAY,IAAZ,CAAiB,IAAjB;;AAEA,gBAAI,OAAO,UAAX,EAAuB;AACnB,qBAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,OAAO,UAA3B,EAAuC,GAAvC,EAA4C;AACxC,yBAAK,YAAL,CAAkB,OAAO,UAAP,CAAkB,CAAlB,CAAlB;AACH;AACJ;;AAED;AACA,iBAAK,WAAL,GAAmB,IAAI,KAAJ,GAAY,KAA/B;AACA,mBAAO,IAAP;AACH;;;gCAEO,I,EAAM,M,EAAQ,O,EAAS;AAC3B,kBAAM,IAAI,KAAJ,CAAU,qBAAV,CAAN;AACH;;;iCAEQ,M,EAAQ,O,EAAS;AACtB,kBAAM,IAAI,KAAJ,CAAU,qBAAV,CAAN;AACH;;AAED;AACA;AACA;;;;AAEA,0BAAc;AAAA;;AAAA;;AAEV,cAAK,MAAL,GAAc,EAAd;AAFU;AAGb;;;;qCAEY;AACT,mBAAO,wBAAa,IAAb,CAAP;AACH;;AAED;;;;;;gCAGQ;AACJ,iBAAK,MAAL,GAAc,EAAd;AACH;;AAED;;;;;;;iCAIS;AACL,mBAAO,0BAAe,KAAK,MAApB,CAAP;AACH;;;;EA3DmC,WAAY,M;;kBAA/B,U","file":"mock_tracer.js","sourcesContent":["\n// TODO: Move mock-tracer to its own NPM package once it is complete and tested.\nimport opentracing from '../..';\n\nimport MockSpan from './mock_span';\nimport MockReport from './mock_report';\n\n/**\n * OpenTracing Tracer implementation designed for use in unit tests.\n */\nexport default class MockTracer extends opentracing.Tracer {\n\n    //------------------------------------------------------------------------//\n    // OpenTracing implementation\n    //------------------------------------------------------------------------//\n\n    _startSpan(name, fields) {\n        // _allocSpan is given it's own method so that derived classes can\n        // allocate any type of object they want, but not have to duplicate\n        // the other common logic in startSpan().\n        const span = this._allocSpan(fields);\n        span.setOperationName(name);\n        this._spans.push(span);\n\n        if (fields.references) {\n            for (let i = 0; i < fields.references; i++) {\n                span.addReference(fields.references[i]);\n            }\n        }\n\n        // Capture the stack at the time the span started\n        span._startStack = new Error().stack;\n        return span;\n    }\n\n    _inject(span, format, carrier) {\n        throw new Error('NOT YET IMPLEMENTED');\n    }\n\n    _extract(format, carrier) {\n        throw new Error('NOT YET IMPLEMENTED');\n    }\n\n    //------------------------------------------------------------------------//\n    // MockTracer-specific\n    //------------------------------------------------------------------------//\n\n    constructor() {\n        super();\n        this._spans = [];\n    }\n\n    _allocSpan() {\n        return new MockSpan(this);\n    }\n\n    /**\n     * Discard any buffered data.\n     */\n    clear() {\n        this._spans = [];\n    }\n\n    /**\n     * Return the buffered data in a format convenient for making unit test\n     * assertions.\n     */\n    report() {\n        return new MockReport(this._spans);\n    }\n}\n"]}
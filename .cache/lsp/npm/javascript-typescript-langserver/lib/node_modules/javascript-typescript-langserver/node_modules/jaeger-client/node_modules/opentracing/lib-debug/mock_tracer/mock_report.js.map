{"version":3,"sources":["../../src/mock_tracer/mock_report.js"],"names":[],"mappings":";;;;;;qjBAAA;;;AACA;;;;;;;;AAEA;;;;IAIqB,U;AAEjB,wBAAY,KAAZ,EAAmB;AAAA;;AAAA;;AACf,aAAK,KAAL,GAAa,KAAb;AACA,aAAK,WAAL,GAAmB,EAAnB;AACA,aAAK,UAAL,GAAkB,EAAlB;AACA,aAAK,UAAL,GAAkB,EAAlB;;AAEA,aAAK,eAAL,GAAuB,EAAvB;;AAEA,6BAAE,IAAF,CAAO,KAAP,EAAc,UAAC,IAAD,EAAU;AACpB,gBAAI,KAAK,SAAL,KAAmB,CAAvB,EAA0B;AACtB,sBAAK,eAAL,CAAqB,IAArB,CAA0B,IAA1B;AACH;;AAED,kBAAK,WAAL,CAAiB,KAAK,IAAL,EAAjB,IAAgC,IAAhC;AACA,kBAAK,UAAL,CAAgB,IAAhB,CAAqB,KAAK,KAAL,EAArB;;AAEA,iCAAE,IAAF,CAAO,KAAK,KAAZ,EAAmB,UAAC,GAAD,EAAM,GAAN,EAAc;AAC7B,sBAAK,UAAL,CAAgB,GAAhB,IAAuB,MAAK,UAAL,CAAgB,GAAhB,KAAwB,EAA/C;AACA,sBAAK,UAAL,CAAgB,GAAhB,EAAqB,GAArB,IAA4B,MAAK,UAAL,CAAgB,GAAhB,EAAqB,GAArB,KAA6B,EAAzD;AACA,sBAAK,UAAL,CAAgB,GAAhB,EAAqB,GAArB,EAA0B,IAA1B,CAA+B,IAA/B;AACH,aAJD;AAKH,SAbD;AAcH;;;;8CAEqB,G,EAAK,G,EAAK;AAC5B,gBAAI,IAAI,KAAK,UAAL,CAAgB,GAAhB,CAAR;AACA,gBAAI,CAAC,CAAL,EAAQ;AACJ,uBAAO,IAAP;AACH;AACD,gBAAI,IAAI,EAAE,GAAF,CAAR;AACA,gBAAI,CAAC,CAAL,EAAQ;AACJ,uBAAO,IAAP;AACH;AACD,mBAAO,EAAE,CAAF,CAAP;AACH;;;;;;kBApCgB,U","file":"mock_report.js","sourcesContent":["/* eslint-disable import/no-extraneous-dependencies */\nimport _ from 'underscore';\n\n/**\n * Index a collection of reported MockSpans in a way that's easy to run unit\n * test assertions against.\n */\nexport default class MockReport {\n\n    constructor(spans) {\n        this.spans = spans;\n        this.spansByUUID = {};\n        this.spansByTag = {};\n        this.debugSpans = [];\n\n        this.unfinishedSpans = [];\n\n        _.each(spans, (span) => {\n            if (span._finishMs === 0) {\n                this.unfinishedSpans.push(span);\n            }\n\n            this.spansByUUID[span.uuid()] = span;\n            this.debugSpans.push(span.debug());\n\n            _.each(span._tags, (val, key) => {\n                this.spansByTag[key] = this.spansByTag[key] || {};\n                this.spansByTag[key][val] = this.spansByTag[key][val] || [];\n                this.spansByTag[key][val].push(span);\n            });\n        });\n    }\n\n    firstSpanWithTagValue(key, val) {\n        let m = this.spansByTag[key];\n        if (!m) {\n            return null;\n        }\n        let n = m[val];\n        if (!n) {\n            return null;\n        }\n        return n[0];\n    }\n}\n"]}
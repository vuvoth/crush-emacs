{"version":3,"sources":["../../src/mock_tracer/mock_span.js"],"names":[],"mappings":";;;;;;;;AAEA;;;;AACA;;;;AACA;;;;;;;;;;+eAJA;;AAMA;;;IAGqB,Q;;;;;;;AAEjB;AACA;AACA;;mCAEW;AACP,mBAAO,2BAAgB,IAAhB,CAAP;AACH;;;0CAEiB,I,EAAM;AACpB,iBAAK,cAAL,GAAsB,IAAtB;AACH;;;iCAEQ,G,EAAK;AACV,gBAAI,OAAO,OAAO,IAAP,CAAY,GAAZ,CAAX;AACA,iBAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,KAAK,MAAzB,EAAiC,GAAjC,EAAsC;AAClC,oBAAI,MAAM,KAAK,CAAL,CAAV;AACA,qBAAK,KAAL,CAAW,GAAX,IAAkB,IAAI,GAAJ,CAAlB;AACH;AACJ;;;6BAEI,M,EAAQ,S,EAAW;AACpB,iBAAK,KAAL,CAAW,IAAX,CAAgB;AACZ,wBAAY,MADA;AAEZ,2BAAY;AAFA,aAAhB;AAIH;;;gCAEO,U,EAAY;AAChB,iBAAK,SAAL,GAAiB,cAAc,KAAK,GAAL,EAA/B;AACH;;AAED;AACA;AACA;;;;AAEA,sBAAY,MAAZ,EAAoB;AAAA;;AAAA;;AAEhB,cAAK,OAAL,GAAe,MAAf;AACA,cAAK,KAAL,GAAa,MAAK,aAAL,EAAb;AACA,cAAK,QAAL,GAAgB,KAAK,GAAL,EAAhB;AACA,cAAK,SAAL,GAAiB,CAAjB;AACA,cAAK,cAAL,GAAsB,EAAtB;AACA,cAAK,KAAL,GAAa,EAAb;AACA,cAAK,KAAL,GAAa,EAAb;AARgB;AASnB;;;;+BAEM;AACH,mBAAO,KAAK,KAAZ;AACH;;;wCAEe;AACZ,mBAAO,KAAK,cAAZ;AACH;;;qCAEY;AACT,mBAAO,KAAK,SAAL,GAAiB,KAAK,QAA7B;AACH;;;+BAEM;AACH,mBAAO,KAAK,KAAZ;AACH;;;wCAEe;AACZ,gBAAM,KAAK,cAAW,KAAK,GAAL,CAAU,KAAK,MAAL,KAAgB,UAAjB,GAA+B,CAAxC,EAA2C,QAA3C,CAAoD,EAApD,CAAX,EAAqE,MAArE,CAA4E,CAAC,CAA7E,CAAX;AACA,gBAAM,KAAK,cAAW,KAAK,GAAL,CAAU,KAAK,MAAL,KAAgB,UAAjB,GAA+B,CAAxC,EAA2C,QAA3C,CAAoD,EAApD,CAAX,EAAqE,MAArE,CAA4E,CAAC,CAA7E,CAAX;AACA,wBAAU,EAAV,GAAe,EAAf;AACH;;;qCAEY,G,EAAK,CACjB;;AAED;;;;;;gCAGQ;AACJ,gBAAI,MAAM;AACN,sBAAY,KAAK,KADX;AAEN,2BAAY,KAAK,cAFX;AAGN,wBAAY,CAAC,KAAK,SAAL,GAAiB,KAAK,QAAvB,EAAiC,KAAK,QAAtC,EAAgD,KAAK,SAArD;AAHN,aAAV;AAKA,gBAAI,qBAAE,IAAF,CAAO,KAAK,KAAZ,CAAJ,EAAwB;AACpB,oBAAI,IAAJ,GAAW,KAAK,KAAhB;AACH;AACD,mBAAO,GAAP;AACH;;;;EAtFiC,WAAY,I;;kBAA7B,Q","file":"mock_span.js","sourcesContent":["/* eslint-disable import/no-extraneous-dependencies */\n\nimport opentracing from '../..';\nimport MockContext from './mock_context';\nimport _ from 'underscore';\n\n/**\n * OpenTracing Span implementation designed for use in unit tests.\n */\nexport default class MockSpan extends opentracing.Span {\n\n    //------------------------------------------------------------------------//\n    // OpenTracing implementation\n    //------------------------------------------------------------------------//\n\n    _context() {\n        return new MockContext(this);\n    }\n\n    _setOperationName(name) {\n        this._operationName = name;\n    }\n\n    _addTags(set) {\n        let keys = Object.keys(set);\n        for (let i = 0; i < keys.length; i++) {\n            let key = keys[i];\n            this._tags[key] = set[key];\n        }\n    }\n\n    _log(fields, timestamp) {\n        this._logs.push({\n            fields    : fields,\n            timestamp : timestamp,\n        });\n    }\n\n    _finish(finishTime) {\n        this._finishMs = finishTime || Date.now();\n    }\n\n    //------------------------------------------------------------------------//\n    // MockSpan-specific\n    //------------------------------------------------------------------------//\n\n    constructor(tracer) {\n        super();\n        this._tracer = tracer;\n        this._uuid = this._generateUUID();\n        this._startMs = Date.now();\n        this._finishMs = 0;\n        this._operationName = '';\n        this._tags = {};\n        this._logs = [];\n    }\n\n    uuid() {\n        return this._uuid;\n    }\n\n    operationName() {\n        return this._operationName;\n    }\n\n    durationMs() {\n        return this._finishMs - this._startMs;\n    }\n\n    tags() {\n        return this._tags;\n    }\n\n    _generateUUID() {\n        const p0 = `00000000${Math.abs((Math.random() * 0xFFFFFFFF) | 0).toString(16)}`.substr(-8);\n        const p1 = `00000000${Math.abs((Math.random() * 0xFFFFFFFF) | 0).toString(16)}`.substr(-8);\n        return `${p0}${p1}`;\n    }\n\n    addReference(ref) {\n    }\n\n    /**\n     * Returns a simplified object better for console.log()'ing.\n     */\n    debug() {\n        let obj = {\n            uuid      : this._uuid,\n            operation : this._operationName,\n            millis    : [this._finishMs - this._startMs, this._startMs, this._finishMs],\n        };\n        if (_.size(this._tags)) {\n            obj.tags = this._tags;\n        }\n        return obj;\n    }\n}\n"]}
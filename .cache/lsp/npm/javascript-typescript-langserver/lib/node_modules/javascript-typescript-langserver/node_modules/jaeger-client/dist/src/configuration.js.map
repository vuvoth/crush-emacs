{"version":3,"sources":["../../src/configuration.js"],"names":["constants","jaegerSchema","id","type","properties","serviceName","disable","sampler","param","hostPort","host","port","refreshIntervalMs","required","additionalProperties","reporter","logSpans","agentHost","agentPort","agentSocketType","collectorEndpoint","username","password","flushIntervalMs","throttler","Configuration","config","options","Error","SAMPLER_TYPE_PROBABILISTIC","ProbabilisticSampler","SAMPLER_TYPE_RATE_LIMITING","RateLimitingSampler","SAMPLER_TYPE_CONST","ConstSampler","SAMPLER_TYPE_REMOTE","RemoteSampler","refreshInterval","metrics","logger","reporterConfig","reporters","isHTTPSender","senderConfig","push","LoggingReporter","sender","HTTPSender","UDPSender","remoteReporter","RemoteReporter","length","CompositeReporter","throttlerOptions","Utils","clone","RemoteThrottler","Metrics","opentracing","Tracer","_getSampler","_getReporter","_getThrottler","info","contextKey","baggagePrefix","tags","traceId128bit","shareRpcSpan","debugThrottler"],"mappings":"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","file":"configuration.js","sourcesContent":["// Copyright (c) 2016 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n// in compliance with the License. You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software distributed under the License\n// is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n// or implied. See the License for the specific language governing permissions and limitations under\n// the License.\n\nimport ConstSampler from './samplers/const_sampler';\nimport ProbabilisticSampler from './samplers/probabilistic_sampler';\nimport RateLimitingSampler from './samplers/rate_limiting_sampler';\nimport RemoteReporter from './reporters/remote_reporter';\nimport CompositeReporter from './reporters/composite_reporter';\nimport LoggingReporter from './reporters/logging_reporter';\nimport RemoteSampler from './samplers/remote_sampler';\nimport Metrics from './metrics/metrics';\nimport Tracer from './tracer';\nimport UDPSender from './reporters/udp_sender';\nimport HTTPSender from './reporters/http_sender';\nimport opentracing from 'opentracing';\nimport * as constants from './constants.js';\nimport RemoteThrottler from './throttler/remote_throttler';\nimport Utils from './util.js';\n\nlet jaegerSchema = {\n  id: '/jaeger',\n  type: 'object',\n  properties: {\n    serviceName: { type: 'string' },\n    disable: { type: 'boolean' },\n    sampler: {\n      properties: {\n        type: { type: 'string' },\n        param: { type: 'number' },\n        hostPort: { type: 'string' },\n        host: { type: 'string' },\n        port: { type: 'number' },\n        refreshIntervalMs: { type: 'number' },\n      },\n      required: ['type', 'param'],\n      additionalProperties: false,\n    },\n    reporter: {\n      properties: {\n        logSpans: { type: 'boolean' },\n        agentHost: { type: 'string' },\n        agentPort: { type: 'number' },\n        agentSocketType: { type: 'string' },\n        collectorEndpoint: { type: 'string' },\n        username: { type: 'string' },\n        password: { type: 'string' },\n        flushIntervalMs: { type: 'number' },\n      },\n      additionalProperties: false,\n    },\n    throttler: {\n      properties: {\n        host: { type: 'string' },\n        port: { type: 'number' },\n        refreshIntervalMs: { type: 'number' },\n      },\n      additionalProperties: false,\n    },\n  },\n};\n\nexport default class Configuration {\n  static _getSampler(config, options) {\n    let type = config.sampler.type;\n    let param = config.sampler.param;\n    let hostPort = config.sampler.hostPort;\n    let host = config.sampler.host;\n    let port = config.sampler.port;\n    let refreshIntervalMs = config.sampler.refreshIntervalMs;\n\n    if (typeof param !== 'number') {\n      throw new Error(`Expecting sampler.param to be a number. Received ${param}`);\n    }\n\n    let sampler;\n    if (type === constants.SAMPLER_TYPE_PROBABILISTIC) {\n      sampler = new ProbabilisticSampler(param);\n    }\n\n    if (type === constants.SAMPLER_TYPE_RATE_LIMITING) {\n      sampler = new RateLimitingSampler(param);\n    }\n\n    if (type === constants.SAMPLER_TYPE_CONST) {\n      sampler = new ConstSampler(param === 1);\n    }\n\n    if (type === constants.SAMPLER_TYPE_REMOTE) {\n      sampler = new RemoteSampler(config.serviceName, {\n        sampler: new ProbabilisticSampler(param),\n        hostPort: hostPort,\n        host: host,\n        port: port,\n        refreshInterval: refreshIntervalMs,\n        metrics: options.metrics,\n        logger: options.logger,\n      });\n    }\n\n    return sampler;\n  }\n\n  static _getReporter(config, options) {\n    let reporterConfig = {};\n    let reporters = [];\n    let isHTTPSender = false;\n    let senderConfig = {\n      logger: options.logger,\n    };\n    if (config.reporter) {\n      if (config.reporter.logSpans) {\n        reporters.push(new LoggingReporter(options.logger));\n      }\n\n      if (config.reporter.flushIntervalMs) {\n        reporterConfig['bufferFlushInterval'] = config.reporter.flushIntervalMs;\n      }\n\n      if (config.reporter.collectorEndpoint) {\n        isHTTPSender = true;\n\n        senderConfig['endpoint'] = config.reporter.collectorEndpoint;\n\n        if (config.reporter.username) {\n          senderConfig['username'] = config.reporter.username;\n        }\n        if (config.reporter.password) {\n          senderConfig['password'] = config.reporter.password;\n        }\n      }\n      if (config.reporter.agentHost) {\n        senderConfig['host'] = config.reporter.agentHost;\n      }\n\n      if (config.reporter.agentPort) {\n        senderConfig['port'] = config.reporter.agentPort;\n      }\n\n      if (config.reporter.agentSocketType) {\n        senderConfig['socketType'] = config.reporter.agentSocketType;\n      }\n    }\n    reporterConfig['metrics'] = options.metrics;\n    reporterConfig['logger'] = options.logger;\n    let sender = isHTTPSender ? new HTTPSender(senderConfig) : new UDPSender(senderConfig);\n    let remoteReporter = new RemoteReporter(sender, reporterConfig);\n    if (reporters.length == 0) {\n      return remoteReporter;\n    }\n    reporters.push(remoteReporter);\n    return new CompositeReporter(reporters);\n  }\n\n  static _getThrottler(config, options) {\n    const throttlerOptions = Utils.clone(config.throttler);\n    if (options.logger) {\n      throttlerOptions.logger = options.logger;\n    }\n    if (options.metrics) {\n      throttlerOptions.metrics = options.metrics;\n    }\n    return new RemoteThrottler(config.serviceName, throttlerOptions);\n  }\n\n  /**\n   * Initialize and return a new instance of Jaeger Tracer.\n   *\n   * The config dictionary is not validated for adherence to the schema above.\n   * Such validation can be performed like this:\n   *\n   *     import {Validator} from 'jsonschema';\n   *\n   *     let v = new Validator();\n   *     v.validate(config, jaegerSchema, {\n   *       throwError: true\n   *     });\n   *\n   * @param {Object} config - configuration matching the jaegerSchema definition.\n   * @param {Object} options - options\n   * @param {Object} [options.reporter] - if provided, this reporter will be used.\n   *        Otherwise a new reporter will be created according to the description\n   *        in the config.\n   * @param {Object} [options.throttler] - if provided, this throttler will be used.\n   *        Otherwise a new throttler will be created according to the description\n   *        in the config.\n   * @param {Object} [options.metrics] - a metrics factory (see ./_flow/metrics.js)\n   * @param {Object} [options.logger] - a logger (see ./_flow/logger.js)\n   * @param {Object} [options.tags] - set of key-value pairs which will be set\n   *        as process-level tags on the Tracer itself.\n   * @param {boolean} [options.traceId128bit] - generate root span with a 128bit traceId.\n   * @param {boolean} [options.shareRpcSpan] - Share the same span for rpc span_kind.\n   */\n\n  static initTracer(config, options = {}) {\n    let reporter;\n    let sampler;\n    let throttler;\n    if (options.metrics) {\n      options.metrics = new Metrics(options.metrics);\n    }\n    if (config.disable) {\n      return new opentracing.Tracer();\n    }\n    if (!config.serviceName) {\n      throw new Error(`config.serviceName must be provided`);\n    }\n    if (config.sampler) {\n      sampler = Configuration._getSampler(config, options);\n    } else {\n      sampler = new RemoteSampler(config.serviceName, options);\n    }\n    if (!options.reporter) {\n      reporter = Configuration._getReporter(config, options);\n    } else {\n      reporter = options.reporter;\n    }\n    if (!options.throttler) {\n      if (config.throttler) {\n        throttler = Configuration._getThrottler(config, options);\n      }\n    } else {\n      throttler = options.throttler;\n    }\n\n    if (options.logger) {\n      options.logger.info(`Initializing Jaeger Tracer with ${reporter} and ${sampler}`);\n    }\n\n    return new Tracer(config.serviceName, reporter, sampler, {\n      contextKey: options.contextKey,\n      baggagePrefix: options.baggagePrefix,\n      metrics: options.metrics,\n      logger: options.logger,\n      tags: options.tags,\n      traceId128bit: options.traceId128bit,\n      shareRpcSpan: options.shareRpcSpan,\n      debugThrottler: throttler,\n    });\n  }\n}\n"]}
{"version":3,"sources":["../src/constants.js"],"names":[],"mappings":";;;;;AAAA;;;;;;;;;;;;;AAaO,IAAM,wCAAgB,QAAtB;;AAEP;;;;;;;;;;;;;AAaO,IAAM,4CAAkB,UAAxB;;AAEP;;;;;;;;;;;;;;;;AAgBO,IAAM,oDAAsB,cAA5B;;AAEP;;;;;;AAMO,IAAM,kDAAqB,UAA3B;;AAEP;;;;;;;AAOO,IAAM,0DAAyB,cAA/B","file":"constants.js","sourcesContent":["/**\n * The FORMAT_BINARY format represents SpanContexts in an opaque binary\n * carrier.\n *\n * Tracer.inject() will set the buffer field to an Array-like (Array,\n * ArrayBuffer, or TypedBuffer) object containing the injected binary data.\n * Any valid Object can be used as long as the buffer field of the object\n * can be set.\n *\n * Tracer.extract() will look for `carrier.buffer`, and that field is\n * expected to be an Array-like object (Array, ArrayBuffer, or\n * TypedBuffer).\n */\nexport const FORMAT_BINARY = 'binary';\n\n/**\n * The FORMAT_TEXT_MAP format represents SpanContexts using a\n * string->string map (backed by a Javascript Object) as a carrier.\n *\n * NOTE: Unlike FORMAT_HTTP_HEADERS, FORMAT_TEXT_MAP places no restrictions\n * on the characters used in either the keys or the values of the map\n * entries.\n *\n * The FORMAT_TEXT_MAP carrier map may contain unrelated data (e.g.,\n * arbitrary gRPC metadata); as such, the Tracer implementation should use\n * a prefix or other convention to distinguish Tracer-specific key:value\n * pairs.\n */\nexport const FORMAT_TEXT_MAP = 'text_map';\n\n/**\n * The FORMAT_HTTP_HEADERS format represents SpanContexts using a\n * character-restricted string->string map (backed by a Javascript Object)\n * as a carrier.\n *\n * Keys and values in the FORMAT_HTTP_HEADERS carrier must be suitable for\n * use as HTTP headers (without modification or further escaping). That is,\n * the keys have a greatly restricted character set, casing for the keys\n * may not be preserved by various intermediaries, and the values should be\n * URL-escaped.\n *\n * The FORMAT_HTTP_HEADERS carrier map may contain unrelated data (e.g.,\n * arbitrary HTTP headers); as such, the Tracer implementation should use a\n * prefix or other convention to distinguish Tracer-specific key:value\n * pairs.\n */\nexport const FORMAT_HTTP_HEADERS = 'http_headers';\n\n/**\n * A Span may be the \"child of\" a parent Span. In a “child of” reference,\n * the parent Span depends on the child Span in some capacity.\n *\n * See more about reference types at http://opentracing.io/spec/\n */\nexport const REFERENCE_CHILD_OF = 'child_of';\n\n/**\n * Some parent Spans do not depend in any way on the result of their child\n * Spans. In these cases, we say merely that the child Span “follows from”\n * the parent Span in a causal sense.\n *\n * See more about reference types at http://opentracing.io/spec/\n */\nexport const REFERENCE_FOLLOWS_FROM = 'follows_from';\n"]}